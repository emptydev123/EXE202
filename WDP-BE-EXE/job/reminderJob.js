const cron = require('node-cron');
const dayjs = require('dayjs');
const MaintenanceReminders = require('../model/maintenanceReminders');
const { broadcastReminderUpdate } = require('../socket/reminderEvent');
//  H√†m d√πng chung: qu√©t v√† g·ª≠i reminder
async function checkDueReminders() {
    console.log(`CHECK Qu√©t reminder ƒë·∫øn h·∫°n t·∫°i ${dayjs().format("DD/MM/YYYY HH:mm")}`);
    const today = dayjs().startOf("day").toDate();

    try {
        const reminders = await MaintenanceReminders.find({
            due_date: { $lte: today },
            is_sent: false
        }).populate("vehicle_id");

        if (!reminders.length) {
            console.log(" Kh√¥ng c√≥ reminder n√†o ƒë·∫øn h·∫°n h√¥m nay.");
            return;
        }

        for (const reminder of reminders) {
            try {
                console.log(`üìß G·ª≠i nh·∫Øc nh·ªü cho xe: ${reminder.vehicle_id?.license_plate || 'Unknown'} - ng√†y ${dayjs(reminder.due_date).format("DD/MM/YYYY")}`);

                // G·ªçi h√†m ph√°t s·ª± ki·ªán WebSocket TR∆Ø·ªöC KHI set is_sent
                broadcastReminderUpdate(reminder);  // Ph√°t s·ª± ki·ªán real-time cho FE

                // Sau ƒë√≥ ƒë√°nh d·∫•u ƒë√£ g·ª≠i
                reminder.is_sent = true;
                await reminder.save();

                console.log(`‚úÖ ƒê√£ g·ª≠i reminder ID: ${reminder._id}`);
            } catch (error) {
                console.error(`‚ùå Error processing reminder ${reminder._id}:`, error.message);
            }
        }

        console.log(" Qu√©t reminder xong.");
    } catch (error) {
        console.error(" L·ªói khi qu√©t reminder:", error.message);
    }
}

//  Cron ch·∫°y m·ªói s√°ng 7h
cron.schedule("0 7 * * *", checkDueReminders);
module.exports = { checkDueReminders };